package com.srn.erp.ventas.da;

import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.StringTokenizer;

import com.srn.erp.general.bm.ClasificadorEntidad;
import com.srn.erp.general.bm.IValorClasificadorEntidad;
import com.srn.erp.general.bm.Moneda;
import com.srn.erp.general.bm.ValorClasificadorEntidad;
import com.srn.erp.stock.bm.TipoProducto;
import com.srn.erp.ventas.bm.ListaPrecios;
import com.srn.erp.ventas.bm.ListaPreciosDet;
import com.srn.erp.ventas.bm.PrecioPorEstrucLP;

import framework.applicarionServer.bl.ObjetosAplicacion.ObjetoLogico;
import framework.applicarionServer.bl.Persistencia.DBObjetoPersistente;
import framework.applicarionServer.bl.Persistencia.IDBObjetoPersistente;
import framework.applicarionServer.bl.Persistencia.IObjetoPersistente;
import framework.applicarionServer.bl.Sesion.ISesion;
import framework.applicarionServer.bl.Utils.Fecha;
import framework.applicarionServer.bl.Utils.ListObserver;
import framework.request.bl.Utils.BaseException;
import framework.request.bl.Utils.HashTableDatos;

public class DBPrecioPorEstrucLP extends DBObjetoPersistente {

  public static final String OID_PRECIO_EST = "oid_precio_est";
  public static final String OID_PRECIO_CAB = "oid_precio_cab";
  public static final String OID_UM = "oid_um";
  public static final String CANTIDAD = "cantidad";
  public static final String OID_MONEDA = "oid_moneda";
  public static final String PRECIO = "precio";
  public static final String OID_CLASIF_ART_1 = "oid_clasif_art_1";
  public static final String OID_CLASIF_ART_2 = "oid_clasif_art_2";
  public static final String ACTIVO = "activo";
  public static final String FEC_ULT_ACT = "fec_ult_act";
  
  public static final int SELECT_BY_LISTA_PRECIO = 100;
  public static final int SELECT_BY_CLASF_ART_1 = 103;
  public final static int SELECT_BY_CONSULTA_MASIVA = 104;
  
  

  public DBPrecioPorEstrucLP() { 
  }

  protected void insert(IObjetoPersistente objetoPersistente) throws BaseException, SQLException { 

    final int OID_PRECIO_EST = 1;
    final int OID_PRECIO_CAB = 2;
    final int OID_UM = 3;
    final int CANTIDAD = 4;
    final int OID_MONEDA = 5;
    final int PRECIO = 6;
    final int OID_CLASIF_ART_2 = 7;
    final int ACTIVO = 8;
    final int FEC_ULT_ACT = 9;

    PrecioPorEstrucLP pers = (PrecioPorEstrucLP) objetoPersistente;
    
    StringBuffer sqlInsert = new StringBuffer();
    sqlInsert.append(" insert into vePreciosEstLP "+
                     " ( "+
                      "OID_PRECIO_EST,"+
                      "OID_PRECIO_CAB,"+
                      "OID_UM,"+
                      "CANTIDAD,"+
                      "OID_MONEDA,"+
                      "PRECIO,"+
                      "OID_CLASIF_ART_2,"+
                      "ACTIVO,FEC_ULT_ACT)"+ 
                      " values "+ 
                      "("+
                      "?,"+
                      "?,"+
                      "?,"+
                      "?,"+
                      "?,"+
                      "?,"+
                      "?,"+
                      "?,"+
                      "?) ");

    PreparedStatement qInsert = getSesion().getConexionBD().prepareStatement(sqlInsert.toString()); 
    qInsert.setInt(OID_PRECIO_EST,pers.getOID());
    qInsert.setInt(OID_PRECIO_CAB,pers.getLista_precios().getOID());
    qInsert.setInt(OID_UM,pers.getUnidad_medida().getOID());
    
    if (pers.getCantidad()!=null)
    	qInsert.setDouble(CANTIDAD,pers.getCantidad().doubleValue());
    else
    	qInsert.setDouble(CANTIDAD,1);
    if (pers.getMoneda()!=null)
    	qInsert.setInt(OID_MONEDA,pers.getMoneda().getOID());
    else
    	qInsert.setInt(OID_MONEDA,Moneda.getMonedaDefaultCostoProducto(this.getSesion()).getOID());
    if (pers.getPrecio()!=null)
    	qInsert.setDouble(PRECIO,pers.getPrecio().doubleValue());
    else
    	qInsert.setDouble(PRECIO,0);
    
    
    qInsert.setInt(OID_CLASIF_ART_2,pers.getValor_clasif_art2().getOID());
    qInsert.setBoolean(ACTIVO,pers.isActivo().booleanValue());
    if (pers.getFecUltAct()!=null)
    	qInsert.setDate(FEC_ULT_ACT,new java.sql.Date(pers.getFecUltAct().getTime()));
    else
    	qInsert.setDate(FEC_ULT_ACT, new java.sql.Date((Fecha.getFechaActual()).getTime()));
    qInsert.executeUpdate();
    qInsert.close();
  }


  protected void update(IObjetoPersistente objetoPersistente) throws BaseException, SQLException { 

    final int OID_PRECIO_CAB = 1;
    final int OID_UM = 2;
    final int CANTIDAD = 3;
    final int OID_MONEDA = 4;
    final int PRECIO = 5;
    final int OID_CLASIF_ART_2 = 6;
    final int ACTIVO = 7;
    final int FEC_ULT_ACT = 8;
    final int OID_PRECIO_EST = 9;

    PrecioPorEstrucLP pers = (PrecioPorEstrucLP) objetoPersistente;
    
    StringBuffer sqlUpdate= new StringBuffer();
    sqlUpdate.append(" update vePreciosEstLP set "+
              "oid_precio_cab=?"+ 
              ",oid_um=?"+ 
              ",cantidad=?"+ 
              ",oid_moneda=?"+ 
              ",precio=?"+ 
              ",oid_clasif_art_2=?"+ 
              ",activo=?"+ 
              ",fec_ult_act=?"+
                 " where " +
                 " oid_precio_est=? ");

    PreparedStatement qUpdate = getSesion().getConexionBD().prepareStatement(sqlUpdate.toString()); 
    qUpdate.setInt(OID_PRECIO_EST,pers.getOID());
    qUpdate.setInt(OID_PRECIO_CAB,pers.getLista_precios().getOID());
    qUpdate.setInt(OID_UM,pers.getUnidad_medida().getOID());
    if (pers.getCantidad()!=null)
    	qUpdate.setDouble(CANTIDAD,pers.getCantidad().doubleValue());
    else
    	qUpdate.setDouble(CANTIDAD,1);
    if (pers.getMoneda()!=null)
    	qUpdate.setInt(OID_MONEDA,pers.getMoneda().getOID());
    else
    	qUpdate.setInt(OID_MONEDA,Moneda.getMonedaDefaultCostoProducto(this.getSesion()).getOID());
    if (pers.getPrecio()!=null)
    	qUpdate.setDouble(PRECIO,pers.getPrecio().doubleValue());
    else
    	qUpdate.setDouble(PRECIO,0);
    qUpdate.setInt(OID_CLASIF_ART_2,pers.getValor_clasif_art2().getOID());
    qUpdate.setBoolean(ACTIVO,pers.isActivo().booleanValue());
    if (pers.getFecUltAct()!=null)
    	qUpdate.setDate(FEC_ULT_ACT,new java.sql.Date(pers.getFecUltAct().getTime()));
    else
    	qUpdate.setDate(FEC_ULT_ACT, new java.sql.Date((Fecha.getFechaActual()).getTime()));    
    qUpdate.executeUpdate(); 
    qUpdate.close();
  }

  protected void delete(IObjetoPersistente objetoPersistente) throws BaseException, SQLException { 
    final int OID_PRECIO_EST = 1; 
    PrecioPorEstrucLP pers = (PrecioPorEstrucLP) objetoPersistente;
    StringBuffer sqlUpdate = new StringBuffer(); 
    sqlUpdate.append("delete from vePreciosEstLP "+
                     " where " + 
                     " oid_precio_est=? ");
    PreparedStatement qUpdate = getSesion().getConexionBD().prepareStatement(sqlUpdate.toString()); 
    qUpdate.setInt(OID_PRECIO_EST, pers.getOID()); 
    qUpdate.executeUpdate();
    qUpdate.close();
  } 

  protected void rehabilitar(IObjetoPersistente objetoPersistente) throws BaseException, SQLException { 
    final int OID_PRECIO_EST = 1; 
    PrecioPorEstrucLP pers = (PrecioPorEstrucLP) objetoPersistente;
    StringBuffer sqlUpdate = new StringBuffer(); 
    sqlUpdate.append("update vePreciosEstLP "+
                     " set activo=1 " + 
                     " where " + 
                     " oid_precio_est=? ");
    PreparedStatement qUpdate = getSesion().getConexionBD().prepareStatement(sqlUpdate.toString()); 
    qUpdate.setInt(OID_PRECIO_EST, pers.getOID()); 
    qUpdate.executeUpdate();
    qUpdate.close();
  } 

  public PreparedStatement prepararSelect(int aSelect, Object aCondiciones) throws BaseException, SQLException {
    PreparedStatement ps = null; 
    switch (aSelect) { 
      case IDBObjetoPersistente.SELECT_BY_OID: { 
        ps = this.selectByOID(aCondiciones); 
        break; 
      } 
      case IDBObjetoPersistente.SELECT_BY_CODIGO: { 
        ps = this.selectByCodigo(aCondiciones); 
        break; 
      } 
      case IDBObjetoPersistente.SELECT_ALL_HELP: { 
        ps = this.selectAllHelp(aCondiciones); 
        break; 
      } 
      case SELECT_BY_LISTA_PRECIO: {
        ps = this.selectByListaPrecio(aCondiciones); 
        break; 
      }
      case SELECT_BY_CLASF_ART_1 : {
        ps = this.selectByClasifArt1(aCondiciones); 
        break; 
      }
      case SELECT_BY_CONSULTA_MASIVA: {
          ps = this.selectByConsultaMasiva(aCondiciones);
          break;
      }
      
      
    } 
    return ps;
  } 

  private PreparedStatement selectByOID(Object aCondiciones) throws BaseException, SQLException { 

    final int OID_PRECIO_EST = 1; 

    StringBuffer textSQL = new StringBuffer(); 
    textSQL.append("SELECT * FROM  vePreciosEstLP "); 
    textSQL.append(" WHERE oid_precio_est = ? "); 
    PreparedStatement querySelect = getSesion().getConexionBD().prepareStatement(textSQL.toString()); 
    int oid = ( (Integer) aCondiciones).intValue(); 
    querySelect.setInt(OID_PRECIO_EST, oid); 
    return querySelect; 
    
  }
  
  
		  
  
  private PreparedStatement selectByClasifArt1(Object aCondiciones) throws BaseException, SQLException { 

    StringBuffer textSQL = new StringBuffer(); 
    textSQL.append("SELECT * FROM  vePreciosEstLP "); 
    textSQL.append(" WHERE oid_precio_cab = ? and oid_clasif_art_2 = ? and activo=1 "); 
    PreparedStatement querySelect = getSesion().getConexionBD().prepareStatement(textSQL.toString());
    
    HashTableDatos condiciones = (HashTableDatos) aCondiciones;
    ListaPrecios listaPrecios = (ListaPrecios)condiciones.get(ListaPrecios.NICKNAME);
    IValorClasificadorEntidad valClasifEnt1 = (IValorClasificadorEntidad)condiciones.get("VALOR_CLASIF_1");
    
    querySelect.setInt(1, listaPrecios.getOID());
    querySelect.setInt(2, valClasifEnt1.getOID());
    return querySelect; 
    
  }
  
  private PreparedStatement selectByListaPrecio(Object aCondiciones) throws BaseException, SQLException { 

	HashTableDatos condiciones = (HashTableDatos) aCondiciones;
	
    StringBuffer textSQL = new StringBuffer(); 
    textSQL.append("SELECT * FROM  vePreciosEstLP "); 
    textSQL.append(" WHERE oid_precio_cab = ? "); 
     
    ListaPrecios listaPrecios = (ListaPrecios) condiciones.get(ListaPrecios.NICKNAME);
    
    if (condiciones.containsKey("VALORES_CLASIFICADOR")) {
    	List valoresClasificador = (List) condiciones.get("VALORES_CLASIFICADOR");
    	if (!valoresClasificador.isEmpty()) {
    		textSQL.append(" and ( ");
    		boolean firsTime = true;
    		Iterator iterValoresClasif = 
    			valoresClasificador.iterator();
    		while (iterValoresClasif.hasNext()) {
    			ValorClasificadorEntidad valClasifEnt = (ValorClasificadorEntidad) iterValoresClasif.next();
    			if (firsTime) {
    				firsTime = false;
    			} else {
    				textSQL.append(" or ");
    			}
    			textSQL.append(" oid_clasif_art_2 in ");
    			textSQL.append(" (select oid_val_clasif_ent from stExtensionPG c , geValClasifEnt d where c.oid_val_clasif_ent=d.oid_val_clasif_ent ");
    			textSQL.append(" and c."+valClasifEnt.getClasificador_entidad().getCampoFisico()+"="+valClasifEnt.getOIDInteger()+") ");
    		}
    		textSQL.append(" ) ");
    	}
    	
    }
    
    PreparedStatement querySelect = getSesion().getConexionBD().prepareStatement(textSQL.toString());
    querySelect.setInt(1, listaPrecios.getOID()); 
    return querySelect; 
  }
  
  private PreparedStatement selectByCodigo(Object aCondiciones) throws BaseException, SQLException { 

    final int CODIGO = 1; 

    StringBuffer textSQL = new StringBuffer(); 
    textSQL.append("SELECT * FROM  vePreciosEstLP "); 
    textSQL.append(" WHERE  = ? ");
    PreparedStatement querySelect = getSesion().getConexionBD().prepareStatement(textSQL.toString()); 
    String codigo = (String) aCondiciones; 
    querySelect.setString(CODIGO, codigo); 
    return querySelect; 
  }
  
  

  private PreparedStatement selectAllHelp(Object aCondiciones) throws BaseException, SQLException {

    StringBuffer textSQL = new StringBuffer();

    textSQL.append("SELECT oid_precio_est oid, codigo,  descripcion ,activo ");
    textSQL.append(" from vePreciosEstLP");
    
    PreparedStatement querySelect = getSesion().getConexionBD().prepareStatement(textSQL.toString()); 
    return querySelect; 
  }
  
  public static List getPreciosClasifArtPorLP(ListaPrecios listaPrecios,
		  List valoresClasificador,
      ISesion aSesion) throws BaseException {
	HashTableDatos condiciones = new HashTableDatos();
	condiciones.put(ListaPrecios.NICKNAME, listaPrecios);
	if (valoresClasificador!=null)
		condiciones.put("VALORES_CLASIFICADOR", valoresClasificador);
  	return (List) ObjetoLogico.getObjects(PrecioPorEstrucLP.NICKNAME,
  			DBPrecioPorEstrucLP.SELECT_BY_LISTA_PRECIO,
  			condiciones,
  			new ListObserver(),
  			aSesion);
  }
  
  private PreparedStatement selectByConsultaMasiva(Object aCondiciones) throws BaseException, SQLException { 

	  HashTableDatos condiciones = (HashTableDatos) aCondiciones;
	  StringBuffer textSQL = new StringBuffer();
	  
	  ListaPrecios listaPrecios = (ListaPrecios) condiciones.get(ListaPrecios.NICKNAME);
	  
	  textSQL.append("select * from vePreciosEstLP a where  ");
	  textSQL.append(" a.oid_precio_cab="+listaPrecios.getOIDInteger());
	  
	  textSQL.append(" and a.oid_clasif_art_2 in (select oid_val_clasif_ent from stExtensionPG c , geValClasifEnt d where c.oid_val_clasif_ent=d.oid_val_clasif_ent ");

	  
		// Descripcion del producto
		if (condiciones.containsKey("oid_producto") && 
			 (condiciones.getInteger("oid_producto").intValue()>0)) {			
			textSQL.append(" and c.oid_val_clasif_ent =" + condiciones.getInteger("oid_producto").toString());
		}			
	  
	  
		// Descripcion del producto
		if (condiciones.containsKey("codigo_producto") && 
			 (condiciones.getString("codigo_producto").length()>0)) {			
			StringTokenizer st = new StringTokenizer(condiciones.getString("codigo_producto"), " ");
			while (st.hasMoreTokens()) {
				String next = st.nextToken().toUpperCase();
				textSQL.append(" and d.codigo like '%" + next + "%' ");
			}
		}			

		// Descripcion del producto
		if (condiciones.containsKey("desc_producto") && 
			 (condiciones.getString("desc_producto").length()>0)) {			
			StringTokenizer st = new StringTokenizer(condiciones.getString("desc_producto"), " ");
			while (st.hasMoreTokens()) {
				String next = st.nextToken().toUpperCase();
				textSQL.append(" and d.descripcion like '%" + next + "%' ");
			}
		}			
		
		// Descripcion abreviada del producto
		if (condiciones.containsKey("desc_abreviada") && 
				 (condiciones.getString("desc_abreviada").length()>0)) {			
				StringTokenizer st = new StringTokenizer(condiciones.getString("desc_abreviada"), " ");
				while (st.hasMoreTokens()) {
					String next = st.nextToken().toUpperCase();
					textSQL.append(" and d.descripcion like '%" + next + "%' ");
				}
		}
		
		if (condiciones.containsKey(TipoProducto.NICKNAME)) {
			TipoProducto tipoProd = (TipoProducto) condiciones.get(TipoProducto.NICKNAME);
			textSQL.append(" and c.oid_tipo_prod="+tipoProd.getOIDInteger());
		}
		
		/*if (condiciones.containsKey("COMPRABLE")) 
			textSQL.append(" and c.comprable=1 ");
		
		if (condiciones.containsKey("VENDIBLE")) 
			textSQL.append(" and c.vendible=1 ");
		
		if (condiciones.containsKey("STOCKEBLE")) 
			textSQL.append(" and c.stockeable=1 ");
		
		if (condiciones.containsKey("PROD_PROPIA")) 
			textSQL.append(" and c.prod_propia=1 ");
		
		if (condiciones.containsKey("IMPORTADO")) 
			textSQL.append(" and c.importado=1 ");*/
		
		if (condiciones.containsKey("LISTA_VAL_CLASIF")) {
			HashTableDatos listaValClasif = 
				(HashTableDatos) condiciones.get("LISTA_VAL_CLASIF");
			Iterator iterValoresClasif = listaValClasif.keySet().iterator();
			while (iterValoresClasif.hasNext()) {
				ClasificadorEntidad clasifEnt = (ClasificadorEntidad) iterValoresClasif.next();
				IValorClasificadorEntidad valor = (IValorClasificadorEntidad)
				    listaValClasif.get(clasifEnt);
				textSQL.append(" and c."+clasifEnt.getCampoFisico()+"="+valor.getOID());
			}
		}
		
		textSQL.append(" )");
		
	PreparedStatement querySelect = getSesion().getConexionBD().prepareStatement(textSQL.toString()); 
		  

	return querySelect;
	  
  }
  
  public static List getConsultaMasivaProductos(
		    ListaPrecios lp,
		    Integer oidProducto,
	  		String descProducto,
	  		String descAbreviada,
	  		String codigoProducto,
	  		TipoProducto tipoProducto,  		
	  		boolean isComprable,
	  		boolean isVendible,
	  		boolean isStockeable,
	  		boolean isProdPropia,
	  		boolean isImportado,
	  		HashTableDatos listaValoresClasif,
	        ISesion aSesion) throws BaseException {
	  	
	  	HashTableDatos condiciones = new HashTableDatos();
	  	
	  	condiciones.put(ListaPrecios.NICKNAME,lp);

	  	if ((oidProducto!=null) && (oidProducto.intValue()>0))
	  		condiciones.put("oid_producto",oidProducto);
	  	
	  	
	  	if ((descProducto!=null) && (descProducto.length()>0))
	  		condiciones.put("desc_producto",descProducto);

	  	if ((descAbreviada!=null) && (descAbreviada.length()>0))
	  		condiciones.put("desc_abreviada",descAbreviada);
	  	
	  	if ((codigoProducto!=null) && (codigoProducto.length()>0))
	  		condiciones.put("codigo_producto",codigoProducto);
	  	
	  	
	  	if (tipoProducto!=null)
	    	condiciones.put(TipoProducto.NICKNAME,tipoProducto);
	  	
	  	if (isComprable)
	  		condiciones.put("COMPRABLE","");
	  	if (isVendible)
	  		condiciones.put("VENDIBLE","");
	  	if (isStockeable)
	  		condiciones.put("STOCKEBLE","");
	  	if (isProdPropia)
	  		condiciones.put("PROD_PROPIA","");
	  	if (isImportado)
	  		condiciones.put("IMPORTADO","");
	  	
	  	if ((listaValoresClasif!=null) && (listaValoresClasif.keySet().size()>0)) 
	  		condiciones.put("LISTA_VAL_CLASIF",listaValoresClasif);
	  	

	  	return (List) ObjetoLogico.getObjects(PrecioPorEstrucLP.NICKNAME,
	  		 DBPrecioPorEstrucLP.SELECT_BY_CONSULTA_MASIVA,
	         condiciones,
	         new ListObserver(),
	         aSesion);
	  	
	  }
		
    




  
  
  
  
  
  
} 
