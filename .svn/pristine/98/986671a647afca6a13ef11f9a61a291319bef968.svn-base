package com.srn.erp.impuestos.op;

import java.util.Iterator;
import java.util.List;

import com.srn.erp.impuestos.bm.ListadoIVACab;
import com.srn.erp.impuestos.bm.ListadoIVAConcImpu;
import com.srn.erp.impuestos.bm.SujetoImpositivo;
import com.srn.erp.ventas.bm.FacturaCab;
import com.srn.erp.ventas.bm.Sujeto;

import framework.request.bl.Operaciones.Operation;
import framework.request.bl.Tablas.Field;
import framework.request.bl.Utils.BaseException;
import framework.request.bl.Utils.ExceptionValidation;
import framework.request.bl.Utils.MapDatos;
import framework.request.bl.XML.IDataSet;
import framework.request.bl.XML.TDataSet;

public class TraerLibroIVAVentas extends Operation {

	public TraerLibroIVAVentas() {
	}

	public void execute(MapDatos mapaDatos) throws BaseException {

		IDataSet dsIVACab = getDataSetLibroIVAVentas();
		IDataSet dsIVAImpu = getDataSetLibroIVAVentasImpu();
		Sujeto sujetoConsFinal = Sujeto.getSujetoDefaultConsFinal(this.getSesion());
		
		if (sujetoConsFinal.getSujeto_impositivo() == null)
			throw new ExceptionValidation(null,"Falta Definir el sujeto impositivo para el cliente "+
					sujetoConsFinal.getCodigo()+"-"+sujetoConsFinal.getRazon_social());

		if (!mapaDatos.containsKey("fecha_desde"))
			throw new ExceptionValidation(null, "Debe ingresar la fecha desde");

		if (!mapaDatos.containsKey("fecha_hasta"))
			throw new ExceptionValidation(null, "Debe ingresar la fecha hasta");

		java.util.Date fechaDesde = mapaDatos.getDate("fecha_desde");
		java.util.Date fechaHasta = mapaDatos.getDate("fecha_hasta");
		SujetoImpositivo sujetoImpositivo = null;
		if (mapaDatos.containsKey("oid_suj_imp"))
			sujetoImpositivo = SujetoImpositivo.findByOidProxy(mapaDatos.getInteger("oid_suj_imp"), getSesion());

		List listado = ListadoIVACab.getLibroIVAVentas(fechaDesde, fechaHasta, sujetoImpositivo, getSesion());
		Iterator iterListadoIVA = listado.iterator();
		while (iterListadoIVA.hasNext()) {
			ListadoIVACab listadoIVACab = (ListadoIVACab) iterListadoIVA.next();
			cargarRegistroLibroIVAVenta(dsIVACab, listadoIVACab,sujetoConsFinal.getSujeto_impositivo());

			Iterator iterConcImpu = listadoIVACab.getConceptosImpuestos().iterator();
			while (iterConcImpu.hasNext()) {
				ListadoIVAConcImpu listadoConcImpu = (ListadoIVAConcImpu) iterConcImpu.next();
				cargarRegistroLibroIVAVentaImpu(dsIVAImpu, listadoIVACab, listadoConcImpu);
			}

		}

		writeCliente(dsIVACab);
		writeCliente(dsIVAImpu);

	}

	private IDataSet getDataSetLibroIVAVentas() {
		IDataSet dataset = new TDataSet();
		dataset.create("TLibroIVAVentas");
		dataset.fieldDef(new Field("oid_listado_iva", Field.INTEGER, 0));
		dataset.fieldDef(new Field("fec_emision", Field.DATE, 0));
		dataset.fieldDef(new Field("fec_imputac", Field.DATE, 0));
		dataset.fieldDef(new Field("razon_social", Field.STRING, 100));
		dataset.fieldDef(new Field("oid_cat_iva", Field.INTEGER, 0));
		dataset.fieldDef(new Field("desc_cat_iva", Field.STRING, 50));
		dataset.fieldDef(new Field("cuit", Field.STRING, 30));
		dataset.fieldDef(new Field("oid_cco", Field.INTEGER, 0));
		dataset.fieldDef(new Field("codigo_cco", Field.STRING, 50));
		dataset.fieldDef(new Field("neto_gravado", Field.CURRENCY, 0));
		dataset.fieldDef(new Field("neto_no_gravado", Field.CURRENCY, 0));
		dataset.fieldDef(new Field("total", Field.CURRENCY, 0));
		dataset.fieldDef(new Field("activo", Field.BOOLEAN, 0));
		dataset.fieldDef(new Field("provincia", Field.STRING, 50));
		return dataset;
	}

	private void cargarRegistroLibroIVAVenta(IDataSet dataset, ListadoIVACab listadoIVACab, SujetoImpositivo sujetoImpositivo) throws BaseException {
		dataset.append();
		dataset.fieldValue("oid_listado_iva", listadoIVACab.getOIDInteger());
		dataset.fieldValue("fec_emision", listadoIVACab.getComprobante().getEmision());
		dataset.fieldValue("fec_imputac", listadoIVACab.getComprobante().getImputac());

		if (listadoIVACab.getComprobante().isActivo()) {
			dataset.fieldValue("razon_social", listadoIVACab.getRazon_social());
			dataset.fieldValue("oid_cat_iva", listadoIVACab.getCategoria_iva().getOIDInteger());
			dataset.fieldValue("desc_cat_iva", listadoIVACab.getCategoria_iva().getDescripcion());
			
			if (listadoIVACab.getSujetoImpositivo().getOID() == sujetoImpositivo.getOID())
				dataset.fieldValue("cuit", "");
			else
				dataset.fieldValue("cuit", listadoIVACab.getCuit());
			dataset.fieldValue("oid_cco", listadoIVACab.getComprobante().getOIDInteger());
			dataset.fieldValue("codigo_cco", listadoIVACab.getComprobante().getCodigo());
			dataset.fieldValue("neto_gravado", listadoIVACab.getNeto_gravado());
			dataset.fieldValue("neto_no_gravado", listadoIVACab.getNeto_no_gravado());
			dataset.fieldValue("total", listadoIVACab.getTotal());
			dataset.fieldValue("activo", true);
			
			FacturaCab facturaCab = FacturaCab.findByOid(listadoIVACab.getComprobante().getOIDInteger(), this.getSesion());
			
			if (facturaCab!=null) {
				if (facturaCab.getProvincia()!=null)
					dataset.fieldValue("provincia", facturaCab.getProvincia().getDescripcion());
				else
					dataset.fieldValue("provincia", "");
			}
			else
				dataset.fieldValue("provincia", facturaCab.getProvincia().getDescripcion());
		} else {
			dataset.fieldValue("razon_social", "*** ANULADA ***");
			dataset.fieldValue("oid_cat_iva", "");
			dataset.fieldValue("desc_cat_iva", "");
			dataset.fieldValue("cuit", "");
			dataset.fieldValue("oid_cco", listadoIVACab.getComprobante().getOIDInteger());
			dataset.fieldValue("codigo_cco", listadoIVACab.getComprobante().getCodigo());
			dataset.fieldValue("neto_gravado", "");
			dataset.fieldValue("neto_no_gravado", "");
			dataset.fieldValue("total", "");
			dataset.fieldValue("activo", false);
			dataset.fieldValue("provincia", "");
		}
	}

	private IDataSet getDataSetLibroIVAVentasImpu() {
		IDataSet dataset = new TDataSet();
		dataset.create("TLibroIVAVentasImpu");
		dataset.fieldDef(new Field("oid_impu_iva", Field.INTEGER, 0));
		dataset.fieldDef(new Field("oid_listado_iva", Field.INTEGER, 0));
		dataset.fieldDef(new Field("oid_conc_impu", Field.INTEGER, 0));
		dataset.fieldDef(new Field("importe", Field.CURRENCY, 0));
		dataset.fieldDef(new Field("oid_col_libro_iva", Field.INTEGER, 0));
		return dataset;
	}

	private void cargarRegistroLibroIVAVentaImpu(IDataSet dataset, ListadoIVACab listadoIVACab, ListadoIVAConcImpu listIVAConcImpu)
			throws BaseException {
		
		if (!listadoIVACab.getComprobante().isActivo()) return;
		
		dataset.append();
		dataset.fieldValue("oid_impu_iva", listIVAConcImpu.getOIDInteger());
		dataset.fieldValue("oid_listado_iva", listadoIVACab.getOIDInteger());
		dataset.fieldValue("oid_conc_impu", listIVAConcImpu.getConcepto_impuesto().getOIDInteger());
		dataset.fieldValue("importe", listIVAConcImpu.getImporte());
		if (listIVAConcImpu.getConcepto_impuesto().getColumnalibroiva() == null)
			throw new ExceptionValidation(null, "Falta configurar la columna libro de IVA Ventas para el concepto de impuesto "
					+ listIVAConcImpu.getConcepto_impuesto().getCodigo() + " - " + listIVAConcImpu.getConcepto_impuesto().getDescripcion());
		dataset.fieldValue("oid_col_libro_iva", listIVAConcImpu.getConcepto_impuesto().getColumnalibroiva().getOIDInteger());
	}

}
