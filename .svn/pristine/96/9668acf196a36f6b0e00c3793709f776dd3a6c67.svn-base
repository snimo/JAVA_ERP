package com.srn.erp.legales.da;

import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Types;
import java.util.Iterator;
import java.util.List;

import com.srn.erp.cip.bm.UtilCIP;
import com.srn.erp.general.bm.ClasificadorEntidad;
import com.srn.erp.general.bm.ValorClasificadorEntidad;
import com.srn.erp.legales.bm.EstadoSeclo;
import com.srn.erp.legales.bm.Seclo;
import com.srn.erp.legales.bm.TipoReclamoLeg;
import com.srn.erp.rrhh.op.TraerLeyendasRepEval;
import com.srn.erp.sueldos.bm.Legajo;

import framework.applicarionServer.bl.ObjetosAplicacion.ObjetoLogico;
import framework.applicarionServer.bl.Persistencia.DBObjetoPersistente;
import framework.applicarionServer.bl.Persistencia.IDBObjetoPersistente;
import framework.applicarionServer.bl.Persistencia.IObjetoPersistente;
import framework.applicarionServer.bl.Sesion.ISesion;
import framework.applicarionServer.bl.Utils.Fecha;
import framework.applicarionServer.bl.Utils.ListObserver;
import framework.applicarionServer.bm.Varios.Money;
import framework.request.bl.Utils.BaseException;
import framework.request.bl.Utils.HashTableDatos;

public class DBSeclo extends DBObjetoPersistente {

	public static final String OID_SECLO = "oid_seclo";
	public static final String OID_LEGAJO = "oid_legajo";
	public static final String FEC_RECEPCION = "fec_recepcion";
	public static final String OID_TIPO_RECLAMO = "oid_tipo_reclamo";
	public static final String MONTO_RECLAMO = "monto_reclamo";
	public static final String OBSERVACIONES = "observaciones";
	public static final String ACTIVO = "activo";
	public static final String OID_ESTADO_SECLO = "oid_estado_seclo";
	public static final String MONTO_ACUERDO = "monto_acuerdo";
	public static final String HONO_LETRADO = "hono_letrado";
	public static final String HONO_CONCILIADO = "hono_conciliado";
	public static final String OTROS_HONO = "otros_hono";
	public static final String PAGADO = "pagado";
	public static final String SALDADO = "saldado";
	public static final String CODIGO_INTERNO = "codigo_interno";
	public static final String TIPO = "tipo";
	public static final String OID_FORMA_EXTINCION = "oid_forma_exti";
	public static final String FEC_NOVEDAD = "fec_novedad";
	public static final String CAUSAL_ACUERDO = "causal_acuerdo";

	public static final int SELECT_BY_LEGAJO = 100;
	public static final int UPDATE_MONTO_PAGADO = 101;
	public static final int SELECT_BY_CONDICIONES = 102;

	public DBSeclo() {
	}

	protected void insert(IObjetoPersistente objetoPersistente) throws BaseException, SQLException {

		final int OID_SECLO = 1;
		final int OID_LEGAJO = 2;
		final int FEC_RECEPCION = 3;
		final int OID_TIPO_RECLAMO = 4;
		final int MONTO_RECLAMO = 5;
		final int OBSERVACIONES = 6;
		final int ACTIVO = 7;
		final int OID_ESTADO_SECLO = 8;
		final int MONTO_ACUERDO = 9;
		final int HONO_LETRADO = 10;
		final int HONO_CONCILIADO = 11;
		final int OTROS_HONO = 12;
		final int PAGADO = 13;
		final int SALDADO = 14;
		final int CODIGO_INTERNO = 15;
		final int TIPO = 16;
		final int OID_FORMA_EXTINCION = 17;
		final int FEC_NOVEDAD = 18;
		final int CAUSAL_ACUERDO = 19;

		Seclo pers = (Seclo) objetoPersistente;

		StringBuffer sqlInsert = new StringBuffer();
		sqlInsert.append(" insert into legSeclos " + " ( " + "OID_SECLO," + "OID_LEGAJO," + "FEC_RECEPCION," + "OID_TIPO_RECLAMO," + "MONTO_RECLAMO," + "OBSERVACIONES," + "ACTIVO,"
				+ "OID_ESTADO_SECLO," + "MONTO_ACUERDO," + "HONO_LETRADO," + "HONO_CONCILIADO," + "OTROS_HONO," + "PAGADO," + "SALDADO , CODIGO_INTERNO , TIPO , oid_forma_exti , fec_novedad , causal_acuerdo)" + " values " + "(" + "?," + "?,"+ "?,"+ "?,"+ "?,"+ "?," + "?,"
				+ "?," + "?," + "?," + "?," + "?," + "?," + "?," + "?," + "?," + "?," + "?," + "?) ");

		PreparedStatement qInsert = getSesion().getConexionBD().prepareStatement(sqlInsert.toString());
		qInsert.setInt(OID_SECLO, pers.getOID());
		qInsert.setInt(OID_LEGAJO, pers.getLegajo().getOID());
		if (pers.getFec_recepcion() != null)
			qInsert.setDate(FEC_RECEPCION, new java.sql.Date(pers.getFec_recepcion().getTime()));
		else
			qInsert.setNull(FEC_RECEPCION, java.sql.Types.DATE);
		if (pers.getTipo_reclamo() != null)
			qInsert.setInt(OID_TIPO_RECLAMO, pers.getTipo_reclamo().getOID());
		else
			qInsert.setNull(OID_TIPO_RECLAMO, java.sql.Types.INTEGER);
		if (pers.getMonto_reclamo() != null)
			qInsert.setDouble(MONTO_RECLAMO, pers.getMonto_reclamo().doubleValue());
		else
			qInsert.setNull(MONTO_RECLAMO, java.sql.Types.DOUBLE);
		qInsert.setString(OBSERVACIONES, pers.getObservaciones());
		qInsert.setBoolean(ACTIVO, pers.isActivo().booleanValue());
		qInsert.setInt(OID_ESTADO_SECLO, pers.getEstado_seclo().getOID());
		if (pers.getMonto_acuerdo() != null)
			qInsert.setDouble(MONTO_ACUERDO, pers.getMonto_acuerdo().doubleValue());
		else
			qInsert.setNull(MONTO_ACUERDO, java.sql.Types.DOUBLE);
		if (pers.getHono_letrado() != null)
			qInsert.setDouble(HONO_LETRADO, pers.getHono_letrado().doubleValue());
		else
			qInsert.setNull(HONO_LETRADO, java.sql.Types.DOUBLE);
		if (pers.getHono_conciliado() != null)
			qInsert.setDouble(HONO_CONCILIADO, pers.getHono_conciliado().doubleValue());
		else
			qInsert.setNull(HONO_CONCILIADO, java.sql.Types.INTEGER);
		if (pers.getOtros_hono() != null)
			qInsert.setDouble(OTROS_HONO, pers.getOtros_hono().doubleValue());
		else
			qInsert.setNull(OTROS_HONO, java.sql.Types.DOUBLE);
		if (pers.getPagado() != null)
			qInsert.setDouble(PAGADO, pers.getPagado().doubleValue());
		else
			qInsert.setNull(PAGADO, java.sql.Types.DOUBLE);
		if (pers.isSaldado() != null) {
			qInsert.setBoolean(SALDADO, pers.isSaldado().booleanValue());
		} else
			qInsert.setBoolean(SALDADO, false);
		if (pers.getCodigoInterno() != null)
			qInsert.setString(CODIGO_INTERNO, pers.getCodigoInterno().trim());
		else
			qInsert.setNull(CODIGO_INTERNO, Types.VARCHAR);
		if (pers.getTipo() != null)
			qInsert.setString(TIPO, pers.getTipo());
		else
			qInsert.setNull(TIPO, Types.VARCHAR);		
		
		if (pers.getFormaExtincion() != null)
			qInsert.setInt(OID_FORMA_EXTINCION, pers.getFormaExtincion().getOID());
		else
			qInsert.setNull(OID_FORMA_EXTINCION, Types.INTEGER);
		
		if (pers.getFechaNovedad() != null)
			qInsert.setDate(FEC_NOVEDAD, new java.sql.Date(pers.getFechaNovedad().getTime()));
		else
			qInsert.setNull(FEC_NOVEDAD, Types.DATE);
		
		if (pers.getCausaAcuerdo() != null)
			qInsert.setString(CAUSAL_ACUERDO, pers.getCausaAcuerdo());
		else
			qInsert.setNull(CAUSAL_ACUERDO, Types.VARCHAR);		
		
		
		qInsert.executeUpdate();
		qInsert.close();
	}

	protected void update(IObjetoPersistente objetoPersistente) throws BaseException, SQLException {

		final int OID_LEGAJO = 1;
		final int FEC_RECEPCION = 2;
		final int OID_TIPO_RECLAMO = 3;
		final int MONTO_RECLAMO = 4;
		final int OBSERVACIONES = 5;
		final int ACTIVO = 6;
		final int OID_ESTADO_SECLO = 7;
		final int MONTO_ACUERDO = 8;
		final int HONO_LETRADO = 9;
		final int HONO_CONCILIADO = 10;
		final int OTROS_HONO = 11;
		final int CODIGO_INTERNO = 12;
		final int TIPO = 13;
		final int OID_FORMA_EXTINCION = 14;
		final int FEC_NOVEDAD = 15;
		final int CAUSAL_ACUERDO = 16;		
		final int OID_SECLO = 17;

		Seclo pers = (Seclo) objetoPersistente;

		StringBuffer sqlUpdate = new StringBuffer();
		sqlUpdate.append(" update legSeclos set " + "oid_legajo=?" + ",fec_recepcion=?" + ",oid_tipo_reclamo=?" + ",monto_reclamo=?" + ",observaciones=?" + ",activo=?" + ",oid_estado_seclo=?"
				+ ",monto_acuerdo=?" + ",hono_letrado=?" + ",hono_conciliado=?" + ",otros_hono=? , codigo_interno = ? , tipo = ? , oid_forma_exti = ? , fec_novedad = ? , causal_acuerdo = ? " + " where " + " oid_seclo=? ");

		PreparedStatement qUpdate = getSesion().getConexionBD().prepareStatement(sqlUpdate.toString());
		qUpdate.setInt(OID_SECLO, pers.getOID());
		qUpdate.setInt(OID_LEGAJO, pers.getLegajo().getOID());
		if (pers.getFec_recepcion() != null)
			qUpdate.setDate(FEC_RECEPCION, new java.sql.Date(pers.getFec_recepcion().getTime()));
		else
			qUpdate.setNull(FEC_RECEPCION, java.sql.Types.DATE);
		if (pers.getTipo_reclamo() != null)
			qUpdate.setInt(OID_TIPO_RECLAMO, pers.getTipo_reclamo().getOID());
		else
			qUpdate.setNull(OID_TIPO_RECLAMO, java.sql.Types.INTEGER);
		if (pers.getMonto_reclamo() != null)
			qUpdate.setDouble(MONTO_RECLAMO, pers.getMonto_reclamo().doubleValue());
		else
			qUpdate.setNull(MONTO_RECLAMO, java.sql.Types.DOUBLE);
		qUpdate.setString(OBSERVACIONES, pers.getObservaciones());
		qUpdate.setBoolean(ACTIVO, pers.isActivo().booleanValue());
		qUpdate.setInt(OID_ESTADO_SECLO, pers.getEstado_seclo().getOID());
		if (pers.getMonto_acuerdo() != null)
			qUpdate.setDouble(MONTO_ACUERDO, pers.getMonto_acuerdo().doubleValue());
		else
			qUpdate.setNull(MONTO_ACUERDO, java.sql.Types.DOUBLE);
		if (pers.getHono_letrado() != null)
			qUpdate.setDouble(HONO_LETRADO, pers.getHono_letrado().doubleValue());
		else
			qUpdate.setNull(HONO_LETRADO, java.sql.Types.DOUBLE);
		if (pers.getHono_conciliado() != null)
			qUpdate.setDouble(HONO_CONCILIADO, pers.getHono_conciliado().doubleValue());
		else
			qUpdate.setNull(HONO_CONCILIADO, java.sql.Types.DOUBLE);
		if (pers.getOtros_hono() != null)
			qUpdate.setDouble(OTROS_HONO, pers.getOtros_hono().doubleValue());
		else
			qUpdate.setNull(OTROS_HONO, java.sql.Types.DOUBLE);
		if (pers.getCodigoInterno() != null)
			qUpdate.setString(CODIGO_INTERNO, pers.getCodigoInterno().trim());
		else
			qUpdate.setNull(CODIGO_INTERNO, Types.VARCHAR);
		if (pers.getTipo() != null)
			qUpdate.setString(TIPO, pers.getTipo());
		else
			qUpdate.setNull(TIPO, Types.VARCHAR);		
		
		if (pers.getFormaExtincion() != null)
			qUpdate.setInt(OID_FORMA_EXTINCION, pers.getFormaExtincion().getOID());
		else
			qUpdate.setNull(OID_FORMA_EXTINCION, Types.INTEGER);
		
		if (pers.getFechaNovedad() != null)
			qUpdate.setDate(FEC_NOVEDAD, new java.sql.Date(pers.getFechaNovedad().getTime()));
		else
			qUpdate.setNull(FEC_NOVEDAD, Types.DATE);
		
		if (pers.getCausaAcuerdo() != null)
			qUpdate.setString(CAUSAL_ACUERDO, pers.getCausaAcuerdo());
		else
			qUpdate.setNull(CAUSAL_ACUERDO, Types.VARCHAR);
		
		qUpdate.executeUpdate();
		qUpdate.close();
	}

	protected void delete(IObjetoPersistente objetoPersistente) throws BaseException, SQLException {
		final int OID_SECLO = 1;
		Seclo pers = (Seclo) objetoPersistente;
		StringBuffer sqlUpdate = new StringBuffer();
		sqlUpdate.append("update legSeclos " + " set activo=0 " + " where " + " oid_seclo=? ");
		PreparedStatement qUpdate = getSesion().getConexionBD().prepareStatement(sqlUpdate.toString());
		qUpdate.setInt(OID_SECLO, pers.getOID());
		qUpdate.executeUpdate();
		qUpdate.close();
	}

	protected void rehabilitar(IObjetoPersistente objetoPersistente) throws BaseException, SQLException {
		final int OID_SECLO = 1;
		Seclo pers = (Seclo) objetoPersistente;
		StringBuffer sqlUpdate = new StringBuffer();
		sqlUpdate.append("update legSeclos " + " set activo=1 " + " where " + " oid_seclo=? ");
		PreparedStatement qUpdate = getSesion().getConexionBD().prepareStatement(sqlUpdate.toString());
		qUpdate.setInt(OID_SECLO, pers.getOID());
		qUpdate.executeUpdate();
		qUpdate.close();
	}

	public PreparedStatement prepararSelect(int aSelect, Object aCondiciones) throws BaseException, SQLException {
		PreparedStatement ps = null;
		switch (aSelect) {
		case IDBObjetoPersistente.SELECT_BY_OID: {
			ps = this.selectByOID(aCondiciones);
			break;
		}
		case IDBObjetoPersistente.SELECT_BY_CODIGO: {
			ps = this.selectByCodigo(aCondiciones);
			break;
		}
		case IDBObjetoPersistente.SELECT_ALL_HELP: {
			ps = this.selectAllHelp(aCondiciones);
			break;
		}
		case SELECT_BY_LEGAJO: {
			ps = this.selectByLegajo(aCondiciones);
			break;
		}
		case UPDATE_MONTO_PAGADO: {
			ps = this.updateMontoPagado(aCondiciones);
			break;
		}
		case SELECT_BY_CONDICIONES: {
			ps = this.selectByCondiciones(aCondiciones);
			break;
		}
		}
		return ps;
	}

	private PreparedStatement selectByOID(Object aCondiciones) throws BaseException, SQLException {

		final int OID_SECLO = 1;

		StringBuffer textSQL = new StringBuffer();
		textSQL.append("SELECT * FROM  legSeclos ");
		textSQL.append(" WHERE oid_seclo = ? ");
		PreparedStatement querySelect = getSesion().getConexionBD().prepareStatement(textSQL.toString());
		int oid = ((Integer) aCondiciones).intValue();
		querySelect.setInt(OID_SECLO, oid);
		return querySelect;
	}

	private PreparedStatement selectByCondiciones(Object aCondiciones) throws BaseException, SQLException {

		HashTableDatos condiciones = (HashTableDatos) aCondiciones;
		java.util.Date fecDesde = (java.util.Date) condiciones.get("FEC_DESDE");
		java.util.Date fecHasta = (java.util.Date) condiciones.get("FEC_HASTA");
		Money montoDesde = (Money) condiciones.get("MONTO_DESDE");
		Money montoHasta = (Money) condiciones.get("MONTO_HASTA");
		String codigoInterno = (String) condiciones.get("CODIGO_INTERNO");
		Boolean soloConAudiPend = (Boolean) condiciones.get("SOLO_CON_AUDI_PEND");
		List tiposReclamos = (List) condiciones.get("TIPOS_RECLAMOS");
		List estadosSeclos = (List) condiciones.get("ESTADOS_SECLOS");
		List legajos = (List) condiciones.get("LEGAJOS");
		List empresa = (List) condiciones.get("EMPRESAS");
		List sectores = (List) condiciones.get("SECTORES");
		List puestos = (List) condiciones.get("PUESTOS");
		List estados = (List) condiciones.get("ESTADOS");
		String tipo = (String) condiciones.get("TIPO");

		ClasificadorEntidad clasifEmpresa = TraerLeyendasRepEval.getClasificadorEmpresa(this.getSesion());
		ClasificadorEntidad clasifSector = TraerLeyendasRepEval.getClasificadorSector(this.getSesion());
		ClasificadorEntidad clasifPuesto = TraerLeyendasRepEval.getClasificadorPuesto(this.getSesion());
		ClasificadorEntidad clasifEstado = TraerLeyendasRepEval.getClasificadorEstado(this.getSesion());

		// Aplicar los filtros correspondientes

		StringBuffer textSQL = new StringBuffer();
		textSQL.append("SELECT * FROM  legSeclos where 1=1 and activo=1 ");
		
		if (tipo!=null) {
			if (tipo.equals(Seclo.TIPO_ACU_INT))
				textSQL.append(" and tipo='"+Seclo.TIPO_ACU_INT+"' ");
			else
				if (tipo.equals(Seclo.TIPO_SECLO))
					textSQL.append(" and tipo='"+Seclo.TIPO_SECLO+"' ");				
		}

		if (fecDesde != null)
			textSQL.append(" and fec_recepcion>=? ");

		if (fecHasta != null)
			textSQL.append(" and fec_recepcion<=? ");

		if ((montoDesde != null) && (montoDesde.doubleValue()!=0))
			textSQL.append(" and monto_reclamo>=? ");

		if ((montoHasta != null) && (montoHasta.doubleValue()!=0))
			textSQL.append(" and monto_reclamo<=? ");

		if ((codigoInterno != null) && (codigoInterno.trim()!=""))
			textSQL.append(" and codigo_interno=? ");

		if (soloConAudiPend != null) {
			if (soloConAudiPend.booleanValue()) {
				textSQL.append(" and oid_seclo in (select oid_seclo from legaudiencias where activo=1 and fecha>=?) ");
			}
		}

		if (tiposReclamos != null) {
			StringBuffer condINTiposReclamo = new StringBuffer("-1");
			Iterator iterReclamos = tiposReclamos.iterator();
			while (iterReclamos.hasNext()) {
				TipoReclamoLeg tipoReclamo = (TipoReclamoLeg) iterReclamos.next();
				if (tipoReclamo != null)
					condINTiposReclamo.append("," + tipoReclamo.getOIDInteger());
			}
			if ((!condINTiposReclamo.toString().equals("-1")))
				textSQL.append(" and oid_tipo_reclamo in (" + condINTiposReclamo.toString() + ") ");
		}

		if (estadosSeclos != null) {
			StringBuffer condINEstadosSeclos = new StringBuffer("-1");
			Iterator iterEstadosSeclos = estadosSeclos.iterator();
			while (iterEstadosSeclos.hasNext()) {
				EstadoSeclo estadoSeclo = (EstadoSeclo) iterEstadosSeclos.next();
				if (estadoSeclo != null)
					condINEstadosSeclos.append("," + estadoSeclo.getOIDInteger());
			}
			if ((!condINEstadosSeclos.toString().equals("-1")))
				textSQL.append(" and oid_estado_seclo in (" + condINEstadosSeclos.toString() + ") ");
		}

		Iterator iterLegajos = legajos.iterator();
		StringBuffer condINLegajo = new StringBuffer("-1");
		while (iterLegajos.hasNext()) {
			Legajo legajo = (Legajo) iterLegajos.next();
			condINLegajo.append(","+legajo.getOIDInteger());
		}
		if (!condINLegajo.toString().equals("-1")) {
			textSQL.append(" and oid_legajo in ("+condINLegajo.toString()+") ");
		}
		
		Iterator iterEmpresas = empresa.iterator();
		StringBuffer condINEmpresas = new StringBuffer("-1");
		while (iterEmpresas.hasNext()) {
			ValorClasificadorEntidad valorClasifEnt = (ValorClasificadorEntidad) iterEmpresas.next();
			condINEmpresas.append(","+valorClasifEnt.getOIDInteger());
		}
		if (!condINEmpresas.toString().equals("-1"))
			textSQL.append(" and oid_seclo in (select oid_seclo from legSeclosReq where OID_VAL_CLASIF_EMP IN ("+condINEmpresas.toString()+")) ");
		
		Iterator iterSectores = sectores.iterator();
		StringBuffer condINSectores = new StringBuffer("-1");
		while (iterSectores.hasNext()) {
			ValorClasificadorEntidad valorClasifEnt = (ValorClasificadorEntidad) iterSectores.next();
			condINSectores.append(","+valorClasifEnt.getOIDInteger());
		}
		if (!condINSectores.toString().equals("-1"))
			textSQL.append(" and oid_legajo in (select oid_legajo from suLegajo where "+clasifSector.getCampoFisico()+" IN ("+condINSectores.toString()+")) ");
		
		
		Iterator iterPuestos = puestos.iterator();
		StringBuffer condINPuestos = new StringBuffer("-1");
		while (iterPuestos.hasNext()) {
			ValorClasificadorEntidad valorClasifEnt = (ValorClasificadorEntidad) iterPuestos.next();
			condINPuestos.append(","+valorClasifEnt.getOIDInteger());
		}
		if (!condINPuestos.toString().equals("-1"))
			textSQL.append(" and oid_legajo in (select oid_legajo from suLegajo where "+clasifPuesto.getCampoFisico()+" IN ("+condINPuestos.toString()+")) ");

		Iterator iterEstados = estados.iterator();
		StringBuffer condINEstados = new StringBuffer("-1");
		while (iterEstados.hasNext()) {
			ValorClasificadorEntidad valorClasifEnt = (ValorClasificadorEntidad) iterEstados.next();
			condINEstados.append(","+valorClasifEnt.getOIDInteger());
		}
		if (!condINEstados.toString().equals("-1"))
			textSQL.append(" and oid_legajo in (select oid_legajo from suLegajo where "+clasifEstado.getCampoFisico()+" IN ("+condINEstados.toString()+")) ");
		

		PreparedStatement querySelect = getSesion().getConexionBD().prepareStatement(textSQL.toString());

		int nroParam = 0;
		if (fecDesde != null) {
			++nroParam;
			querySelect.setDate(nroParam, new java.sql.Date(fecDesde.getTime()));
		}

		if (fecHasta != null) {
			++nroParam;
			querySelect.setDate(nroParam, new java.sql.Date(fecHasta.getTime()));
		}

		if ((montoDesde != null) && (montoDesde.doubleValue()!=0)) {
			++nroParam;
			querySelect.setDouble(nroParam, montoDesde.doubleValue());
		}

		if ((montoHasta != null) && (montoHasta.doubleValue()!=0)) {
			++nroParam;
			querySelect.setDouble(nroParam, montoHasta.doubleValue());			
		}

		if ((codigoInterno != null) && (codigoInterno.trim()!="")) {
			++nroParam;
			querySelect.setString(nroParam, codigoInterno);			
		}

		java.util.Date fecActual = Fecha.getFechaTruncada(UtilCIP.getFechaHoraActual(this.getSesion())); 
		
		if (soloConAudiPend != null) {
			if (soloConAudiPend.booleanValue()) {
				++nroParam;
				querySelect.setDate(nroParam, new java.sql.Date(fecActual.getTime())); 				
			}
		}
		
		return querySelect;
	}

	private PreparedStatement selectByLegajo(Object aCondiciones) throws BaseException, SQLException {
		StringBuffer textSQL = new StringBuffer();
		textSQL.append("SELECT * FROM  legSeclos ");
		textSQL.append(" WHERE oid_legajo = ? and activo = 1 ");
		PreparedStatement querySelect = getSesion().getConexionBD().prepareStatement(textSQL.toString());
		Legajo legajo = (Legajo) aCondiciones;
		querySelect.setInt(1, legajo.getOID());
		return querySelect;
	}

	private PreparedStatement selectByCodigo(Object aCondiciones) throws BaseException, SQLException {

		final int CODIGO = 1;

		StringBuffer textSQL = new StringBuffer();
		textSQL.append("SELECT * FROM  legSeclos ");
		textSQL.append(" WHERE  = ? ");
		PreparedStatement querySelect = getSesion().getConexionBD().prepareStatement(textSQL.toString());
		String codigo = (String) aCondiciones;
		querySelect.setString(CODIGO, codigo);
		return querySelect;
	}

	private PreparedStatement selectAllHelp(Object aCondiciones) throws BaseException, SQLException {

		StringBuffer textSQL = new StringBuffer();

		textSQL.append("SELECT oid_seclo oid, codigo,  descripcion ,activo ");
		textSQL.append(" from legSeclos");

		PreparedStatement querySelect = getSesion().getConexionBD().prepareStatement(textSQL.toString());
		return querySelect;
	}

	private PreparedStatement updateMontoPagado(Object aCondiciones) throws BaseException, SQLException {

		Seclo seclo = (Seclo) aCondiciones;
		StringBuffer sqlUpdate = new StringBuffer();

		sqlUpdate.append(" update legSeclos ");
		sqlUpdate.append(" set pagado=(select sum(pago_acuerdo+pago_letrado+pago_conciliador+pago_otros) from legPagoSeclo where oid_seclo=" + seclo.getOIDInteger() + " and activo=1) ");
		sqlUpdate.append(" where oid_seclo =" + seclo.getOIDInteger());

		PreparedStatement qUpdate = getSesion().getConexionBD().prepareStatement(sqlUpdate.toString());
		qUpdate.executeUpdate();
		qUpdate.close();
		return null;
	}

	public static List getSeclosByLegajo(Legajo aLegajo, ISesion aSesion) throws BaseException {
		return (List) ObjetoLogico.getObjects(Seclo.NICKNAME, DBSeclo.SELECT_BY_LEGAJO, aLegajo, new ListObserver(), aSesion);
	}

	public static List getSeclos(HashTableDatos condiciones, ISesion aSesion) throws BaseException {
		return (List) ObjetoLogico.getObjects(Seclo.NICKNAME, DBSeclo.SELECT_BY_CONDICIONES, condiciones, new ListObserver(), aSesion);
	}

	public static void actualizarMontoPagado(Seclo aSeclo, ISesion aSesion) throws BaseException {
		ObjetoLogico.getObjects(Seclo.NICKNAME, DBSeclo.UPDATE_MONTO_PAGADO, aSeclo, null, aSesion);
	}

}
